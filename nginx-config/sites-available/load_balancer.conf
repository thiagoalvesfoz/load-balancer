upstream app {
    least_conn; # enviar para o servidor com o menor número de conexões
    server  127.0.0.1:8081 weight=4;
    server  127.0.0.1:8082;
    
    server  192.168.10.20:8083 weight=3;
    server  192.168.10.20:8084;
    server  192.168.10.20:8085;
}

server {
    listen              443 ssl;
    listen              [::]:443 ssl;
    server_name         app;
    
    # SSL
    ssl on;
    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    # security headers
    add_header X-XSS-Protection          "1; mode=block" always;
    add_header X-Content-Type-Options    "nosniff" always;
    add_header Referrer-Policy           "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy   "default-src 'self' http: https: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
    add_header Permissions-Policy        "interest-cohort=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        # Rate Limit
        limit_req           zone=rate_limit burst=20 nodelay;
        limit_req_status    429; # Too Many Requests
        limit_req_log_level warn;
        
        # Proxy 
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Queue-Start "t=${msec}000";
        
        proxy_pass          http://app;
    }
}

# Redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    
    server_name  localhost;

    location / {
        return 301 https://$host$request_uri;
    }
}